version: "3.8"

services:
  # Production deployment
  wan22-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: wan22-production
    ports:
      - "8000:8000"
    volumes:
      # Persistent storage for models, outputs, and config
      - ./models:/app/models:rw
      - ./loras:/app/loras:rw
      - ./backend/outputs:/app/backend/outputs:rw
      - ./backend/logs:/app/backend/logs:rw
      - ./config.json:/app/config.json:ro
      # Optional: Mount custom config
      - ./config_production.json:/app/config_production.json:ro
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONPATH=/app
      - CONFIG_FILE=/app/config_production.json
      - LOG_LEVEL=INFO
      - MAX_WORKERS=4
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Development environment
  wan22-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: wan22-development
    ports:
      - "8000:8000" # Backend
      - "3000:3000" # Frontend dev server
    volumes:
      # Mount source code for hot reload
      - ./backend:/app/backend:rw
      - ./frontend:/app/frontend:rw
      - ./*.py:/app/:rw
      - ./config.json:/app/config.json:rw
      # Persistent storage
      - ./models:/app/models:rw
      - ./loras:/app/loras:rw
      - ./backend/outputs:/app/backend/outputs:rw
      - ./backend/logs:/app/backend/logs:rw
      # Node modules cache
      - wan22-node-modules:/app/frontend/node_modules
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONPATH=/app
      - NODE_ENV=development
      - LOG_LEVEL=DEBUG
      - RELOAD=true
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    profiles:
      - dev

  # Database for development (optional SQLite alternative)
  postgres-dev:
    image: postgres:15-alpine
    container_name: wan22-postgres-dev
    environment:
      POSTGRES_DB: wan22_dev
      POSTGRES_USER: wan22_user
      POSTGRES_PASSWORD: wan22_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    profiles:
      - dev
      - postgres

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: wan22-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    profiles:
      - cache

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: wan22-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - wan22-app
    profiles:
      - production
      - nginx

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: wan22-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: wan22-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  wan22-node-modules:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  default:
    name: wan22-network
