#!/usr/bin/env python3
"""
Comprehensive Error Messaging System Demo

This demo showcases the complete error messaging system with:
- User-friendly error messages for each failure type
- Specific guidance for common compatibility issues
- Error recovery suggestions with actionable steps
- Progressive error disclosure (basic ‚Üí detailed ‚Üí diagnostic)

Requirements covered: 1.4, 2.4, 3.4, 4.4, 6.4, 7.4
"""

import json
from pathlib import Path
from error_messaging_system import (
    ErrorMessageGenerator,
    ErrorMessageFormatter,
    ProgressiveErrorDisclosure,
    ErrorGuidanceSystem,
    ErrorAnalytics,
    EnhancedErrorHandler,
    ErrorContext,
    create_architecture_error,
    create_pipeline_error,
    create_vae_error,
    create_resource_error,
    create_dependency_error,
    create_video_error
)

def demo_basic_error_messages():
    """Demonstrate basic error message generation for different failure types"""
    print("=" * 80)
    print("DEMO: Basic Error Messages for Different Failure Types")
    print("=" * 80)
    
    generator = ErrorMessageGenerator()
    formatter = ErrorMessageFormatter()
    
    # Demo scenarios with different error types
    scenarios = [
        {
            "name": "Missing Pipeline Class",
            "error_type": "missing_pipeline_class",
            "context": ErrorContext(
                model_path="/models/Wan-AI/Wan2.2-T2V-A14B-Diffusers",
                model_name="Wan-AI/Wan2.2-T2V-A14B-Diffusers",
                pipeline_class="WanPipeline",
                attempted_operation="pipeline_loading"
            )
        },
        {
            "name": "VAE Shape Mismatch",
            "error_type": "vae_shape_mismatch",
            "context": ErrorContext(
                model_path="/models/Wan-AI/Wan2.2-T2V-A14B-Diffusers",
                model_name="Wan-AI/Wan2.2-T2V-A14B-Diffusers",
                attempted_operation="vae_loading"
            )
        },
        {
            "name": "Insufficient VRAM",
            "error_type": "insufficient_vram",
            "context": ErrorContext(
                model_name="Wan-AI/Wan2.2-T2V-A14B-Diffusers",
                system_info={
                    "available_vram": "8GB",
                    "required_vram": "12GB",
                    "gpu_name": "RTX 3070"
                },
                attempted_operation="model_loading"
            )
        },
        {
            "name": "Remote Code Blocked",
            "error_type": "remote_code_blocked",
            "context": ErrorContext(
                model_name="Wan-AI/Wan2.2-T2V-A14B-Diffusers",
                pipeline_class="WanPipeline",
                attempted_operation="remote_code_fetch"
            )
        }
    ]
    
    for scenario in scenarios:
        print(f"\nüìã Scenario: {scenario['name']}")
        print("-" * 50)
        
        error_msg = generator.generate_error_message(
            scenario["error_type"], 
            scenario["context"]
        )
        
        # Show basic console output
        console_output = formatter.format_for_console(error_msg, "basic")
        print(console_output)
        
        print(f"\nüí° Recovery Actions Available: {len(error_msg.recovery_actions)}")
        for i, action in enumerate(error_msg.recovery_actions[:2], 1):  # Show first 2
            print(f"   {i}. {action.title}")
            if action.estimated_time:
                print(f"      ‚è±Ô∏è  Estimated time: {action.estimated_time}")

def demo_progressive_disclosure():
    """Demonstrate progressive error disclosure levels"""
    print("\n" + "=" * 80)
    print("DEMO: Progressive Error Disclosure (Basic ‚Üí Detailed ‚Üí Diagnostic)")
    print("=" * 80)
    
    generator = ErrorMessageGenerator()
    formatter = ErrorMessageFormatter()
    
    # Create a complex error scenario
    context = ErrorContext(
        model_path="/models/Wan-AI/Wan2.2-T2V-A14B-Diffusers",
        model_name="Wan-AI/Wan2.2-T2V-A14B-Diffusers",
        pipeline_class="WanPipeline",
        system_info={
            "gpu": "RTX 3070",
            "vram_total": "8GB",
            "vram_available": "6GB",
            "python_version": "3.11.4",
            "torch_version": "2.1.0"
        },
        attempted_operation="pipeline_loading"
    )
    
    # Simulate an exception
    exception = ImportError("No module named 'wan_pipeline'")
    
    error_msg = generator.generate_error_message(
        "missing_pipeline_class", context, exception
    )
    
    disclosure_levels = ["basic", "detailed", "diagnostic"]
    
    for level in disclosure_levels:
        print(f"\nüîç {level.upper()} DISCLOSURE LEVEL")
        print("=" * 40)
        
        output = formatter.format_for_console(error_msg, level)
        print(output)
        
        if level != "diagnostic":
            input("\nPress Enter to see more details...")

def demo_guided_resolution():
    """Demonstrate guided error resolution system"""
    print("\n" + "=" * 80)
    print("DEMO: Guided Error Resolution System")
    print("=" * 80)
    
    guidance = ErrorGuidanceSystem()
    
    context = ErrorContext(
        model_path="/models/Wan-AI/Wan2.2-T2V-A14B-Diffusers",
        pipeline_class="WanPipeline",
        system_info={"available_vram": "8GB"}
    )
    
    print("üéØ Getting guided resolution for missing pipeline...")
    resolution = guidance.get_guided_resolution("missing_pipeline_class", context)
    
    print(f"\nüìù Error Summary:")
    print(f"   {resolution['error_summary']}")
    
    print(f"\nüõ†Ô∏è  Guided Steps ({len(resolution['guided_steps'])} steps):")
    for i, step in enumerate(resolution['guided_steps'], 1):
        print(f"\n   Step {i}: {step['title']}")
        print(f"   Type: {step['type']}")
        print(f"   Description: {step['description']}")
        if step['command']:
            print(f"   Command: {step['command']}")
        if step['estimated_time']:
            print(f"   ‚è±Ô∏è  Time: {step['estimated_time']}")
        if step['validation']:
            print(f"   ‚úÖ Validation: {step['validation']['validation_command']}")
    
    print(f"\nüîÑ Alternative Solutions ({len(resolution['alternative_solutions'])}):")
    for alt in resolution['alternative_solutions']:
        print(f"   ‚Ä¢ {alt['title']}: {alt['description']}")
    
    print(f"\nüõ°Ô∏è  Prevention Tips:")
    for tip in resolution['prevention_tips']:
        print(f"   ‚Ä¢ {tip}")

def demo_error_analytics():
    """Demonstrate error analytics and tracking"""
    print("\n" + "=" * 80)
    print("DEMO: Error Analytics and Tracking")
    print("=" * 80)
    
    # Create temporary analytics file
    analytics_file = "demo_error_analytics.json"
    analytics = ErrorAnalytics(analytics_file)
    
    print("üìä Simulating error occurrences...")
    
    # Simulate various errors
    contexts = [
        ErrorContext(model_path="/models/wan2.2-t2v.bin"),
        ErrorContext(model_path="/models/wan2.2-mini.bin"),
        ErrorContext(model_path="/models/custom-wan.bin"),
    ]
    
    error_types = [
        "missing_pipeline_class",
        "vae_shape_mismatch", 
        "insufficient_vram",
        "remote_code_blocked"
    ]
    
    # Record some errors with resolutions
    for i, error_type in enumerate(error_types):
        for j, context in enumerate(contexts):
            analytics.record_error(error_type, context, resolved=(i + j) % 2 == 0)
    
    # Get statistics
    stats = analytics.get_error_statistics()
    
    print(f"\nüìà Error Statistics:")
    print(f"   Total errors recorded: {stats['total_errors']}")
    
    print(f"\nüî• Most Common Errors:")
    for error_type, count in stats['most_common_errors']:
        print(f"   ‚Ä¢ {error_type}: {count} occurrences")
    
    print(f"\n‚úÖ Resolution Rates:")
    for error_type, rate in stats['resolution_rates'].items():
        print(f"   ‚Ä¢ {error_type}: {rate:.1%} success rate")
    
    print(f"\n‚ö†Ô∏è  Problematic Models:")
    for model_info in stats['problematic_models']:
        print(f"   ‚Ä¢ {model_info['model']}: {model_info['total_errors']} errors")
    
    # Clean up
    Path(analytics_file).unlink(missing_ok=True)

def demo_enhanced_error_handler():
    """Demonstrate the enhanced error handler with full integration"""
    print("\n" + "=" * 80)
    print("DEMO: Enhanced Error Handler (Full Integration)")
    print("=" * 80)
    
    handler = EnhancedErrorHandler()
    
    context = ErrorContext(
        model_path="/models/Wan-AI/Wan2.2-T2V-A14B-Diffusers",
        model_name="Wan-AI/Wan2.2-T2V-A14B-Diffusers",
        pipeline_class="WanPipeline",
        system_info={
            "gpu": "RTX 4090",
            "vram_total": "24GB",
            "python_version": "3.11.4"
        }
    )
    
    print("üö® Handling compatibility error with full system...")
    
    response = handler.handle_compatibility_error(
        "missing_pipeline_class", 
        context, 
        interactive=True
    )
    
    print(f"\nüìã Error Message:")
    error_msg = response['error_message']
    print(f"   Title: {error_msg['title']}")
    print(f"   Severity: {error_msg['severity']}")
    print(f"   Category: {error_msg['category']}")
    
    print(f"\nüéØ Guided Resolution Available: {'Yes' if response['guided_resolution'] else 'No'}")
    if response['guided_resolution']:
        guided = response['guided_resolution']
        print(f"   Steps: {len(guided['guided_steps'])}")
        print(f"   Alternatives: {len(guided['alternative_solutions'])}")
        print(f"   Prevention tips: {len(guided['prevention_tips'])}")
    
    print(f"\nüÜî Error ID: {response['error_id']}")
    
    print(f"\nüÜò Support Information:")
    support = response['support_info']
    print(f"   Documentation: {support['documentation_url']}")
    print(f"   Community: {support['community_forum']}")
    print(f"   Issues: {support['issue_tracker']}")
    
    # Simulate marking as resolved
    print(f"\n‚úÖ Marking error as resolved...")
    handler.mark_error_resolved("missing_pipeline_class", context)
    
    # Show system health
    health = handler.get_system_health()
    print(f"\nüè• System Health Score: {health['health_score']}/100")
    print(f"   Recommendations: {len(health['recommendations'])}")
    for rec in health['recommendations'][:2]:
        print(f"   ‚Ä¢ {rec}")

def demo_convenience_functions():
    """Demonstrate convenience functions for common scenarios"""
    print("\n" + "=" * 80)
    print("DEMO: Convenience Functions for Common Error Scenarios")
    print("=" * 80)
    
    print("üîß Architecture Detection Error:")
    arch_error = create_architecture_error(
        "/models/corrupted-model", 
        "corrupted_model_index"
    )
    print(arch_error[:200] + "..." if len(arch_error) > 200 else arch_error)
    
    print(f"\nüîß Pipeline Loading Error:")
    pipeline_error = create_pipeline_error(
        "/models/wan-model", 
        "WanPipeline", 
        "missing_pipeline_class"
    )
    print(pipeline_error[:200] + "..." if len(pipeline_error) > 200 else pipeline_error)
    
    print(f"\nüîß VAE Compatibility Error:")
    vae_error = create_vae_error(
        "/models/wan-model", 
        "vae_shape_mismatch"
    )
    print(vae_error[:200] + "..." if len(vae_error) > 200 else vae_error)
    
    print(f"\nüîß Resource Constraint Error:")
    resource_error = create_resource_error(
        "insufficient_vram", 
        {"available_vram": "8GB", "required_vram": "12GB"}
    )
    print(resource_error[:200] + "..." if len(resource_error) > 200 else resource_error)
    
    print(f"\nüîß Dependency Management Error:")
    dep_error = create_dependency_error(
        "dependency_missing", 
        ["torch>=2.0.0", "diffusers>=0.21.0", "wan-pipeline"]
    )
    print(dep_error[:200] + "..." if len(dep_error) > 200 else dep_error)
    
    print(f"\nüîß Video Processing Error:")
    video_error = create_video_error(
        "encoding_failed", 
        "/outputs/generated_video.mp4"
    )
    print(video_error[:200] + "..." if len(video_error) > 200 else video_error)

def demo_requirements_coverage():
    """Demonstrate coverage of specific requirements"""
    print("\n" + "=" * 80)
    print("DEMO: Requirements Coverage Verification")
    print("=" * 80)
    
    generator = ErrorMessageGenerator()
    
    requirements_tests = [
        {
            "requirement": "1.4 - Clear instructions for obtaining pipeline code",
            "error_type": "missing_pipeline_class",
            "context": ErrorContext(
                model_path="/models/wan-model",
                pipeline_class="WanPipeline"
            ),
            "validation": lambda msg: any("Install" in action.title for action in msg.recovery_actions)
        },
        {
            "requirement": "2.4 - Specific error messages about VAE compatibility",
            "error_type": "vae_shape_mismatch",
            "context": ErrorContext(
                model_path="/models/wan-model",
                model_name="Wan-AI/Wan2.2-T2V-A14B-Diffusers"
            ),
            "validation": lambda msg: "3D architecture" in (msg.detailed_description or "")
        },
        {
            "requirement": "3.4 - Clear error messages about required arguments",
            "error_type": "pipeline_args_mismatch",
            "context": ErrorContext(
                pipeline_class="WanPipeline",
                attempted_operation="pipeline_initialization"
            ),
            "validation": lambda msg: "arguments" in msg.summary.lower()
        },
        {
            "requirement": "4.4 - Diagnostic information about compatibility issues",
            "error_type": "missing_components",
            "context": ErrorContext(
                model_path="/models/wan-model",
                system_info={"gpu": "RTX 4090"}
            ),
            "validation": lambda msg: msg.technical_details is not None
        },
        {
            "requirement": "6.4 - Local installation alternatives for security restrictions",
            "error_type": "remote_code_blocked",
            "context": ErrorContext(
                model_name="Wan-AI/Wan2.2-T2V-A14B-Diffusers",
                pipeline_class="WanPipeline"
            ),
            "validation": lambda msg: any("Local" in action.title for action in msg.recovery_actions)
        },
        {
            "requirement": "7.4 - Clear installation guidance for encoding dependencies",
            "error_type": "encoding_failed",
            "context": ErrorContext(
                user_inputs={"output_path": "/outputs/video.mp4"},
                attempted_operation="video_encoding"
            ),
            "validation": lambda msg: any("FFmpeg" in action.title for action in msg.recovery_actions)
        }
    ]
    
    print("üß™ Testing requirements coverage...")
    
    for test in requirements_tests:
        print(f"\n‚úÖ Testing: {test['requirement']}")
        
        error_msg = generator.generate_error_message(
            test["error_type"], 
            test["context"]
        )
        
        if test["validation"](error_msg):
            print(f"   ‚úì PASSED - Requirement satisfied")
        else:
            print(f"   ‚úó FAILED - Requirement not satisfied")
        
        print(f"   Error: {error_msg.title}")
        print(f"   Actions: {len(error_msg.recovery_actions)} recovery actions available")

def main():
    """Run all error messaging system demos"""
    print("üé≠ COMPREHENSIVE ERROR MESSAGING SYSTEM DEMO")
    print("=" * 80)
    print("This demo showcases the complete error messaging system implementation")
    print("covering all requirements: 1.4, 2.4, 3.4, 4.4, 6.4, 7.4")
    print("=" * 80)
    
    demos = [
        ("Basic Error Messages", demo_basic_error_messages),
        ("Progressive Disclosure", demo_progressive_disclosure),
        ("Guided Resolution", demo_guided_resolution),
        ("Error Analytics", demo_error_analytics),
        ("Enhanced Error Handler", demo_enhanced_error_handler),
        ("Convenience Functions", demo_convenience_functions),
        ("Requirements Coverage", demo_requirements_coverage)
    ]
    
    for i, (name, demo_func) in enumerate(demos, 1):
        print(f"\nüé¨ Demo {i}/{len(demos)}: {name}")
        try:
            demo_func()
        except KeyboardInterrupt:
            print("\n\nüëã Demo interrupted by user")
            break
        except Exception as e:
            print(f"\n‚ùå Demo failed: {e}")
        
        if i < len(demos):
            input(f"\nPress Enter to continue to next demo...")
    
    print("\n" + "=" * 80)
    print("üéâ COMPREHENSIVE ERROR MESSAGING SYSTEM DEMO COMPLETED")
    print("=" * 80)
    print("‚úÖ All error messaging features demonstrated successfully!")
    print("‚úÖ Progressive disclosure working (basic ‚Üí detailed ‚Üí diagnostic)")
    print("‚úÖ Guided resolution with actionable steps")
    print("‚úÖ Error analytics and tracking")
    print("‚úÖ Requirements 1.4, 2.4, 3.4, 4.4, 6.4, 7.4 covered")
    print("=" * 80)

if __name__ == "__main__":
    main()