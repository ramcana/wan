name: Project Health Check

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: "0 6 * * *"
  workflow_dispatch:
    inputs:
      full_check:
        description: "Run full comprehensive health check"
        required: false
        default: "false"
        type: boolean
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  health-monitoring:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for trend analysis

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pyyaml jsonschema requests beautifulsoup4
          pip install pytest pytest-cov pytest-benchmark

      - name: Run comprehensive health check
        run: |
          python tools/health-checker/run_health_check.py \
            --comprehensive=${{ github.event.inputs.full_check || 'false' }} \
            --output-format=json \
            --output-file=health-report.json \
            --include-trends=true
        continue-on-error: true

      - name: Ensure health report exists
        run: |
          if [ ! -f "health-report.json" ]; then
            echo "Health check failed, creating fallback report"
            cat > health-report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "overall_score": 0.0,
            "categories": {
              "tests": {"score": 0.0, "status": "critical"},
              "documentation": {"score": 0.0, "status": "critical"},
              "configuration": {"score": 0.0, "status": "critical"},
              "code_quality": {"score": 0.0, "status": "critical"}
            },
            "issues": [
              {
                "severity": "critical",
                "description": "Health check system failed to run properly"
              }
            ],
            "recommendations": [
              "Fix health check system dependencies and configuration"
            ]
          }
          EOF
          fi

      - name: Generate health dashboard
        run: |
          python tools/health-checker/generate_dashboard.py \
            --input=health-report.json \
            --output=health-dashboard.html
        continue-on-error: true

      - name: Check critical health issues
        run: |
          python -c "
          import json
          import sys

          try:
              with open('health-report.json') as f:
                  report = json.load(f)

              critical_issues = [
                  issue for issue in report.get('issues', [])
                  if issue.get('severity') == 'critical'
              ]

              if critical_issues:
                  print(f'Found {len(critical_issues)} critical health issues:')
                  for issue in critical_issues:
                      print(f'- {issue.get(\"description\", \"Unknown issue\")}')
                  # Don't exit with error code to allow workflow to continue
                  print('Critical issues detected but allowing workflow to continue for artifact creation')
              else:
                  print('No critical health issues found.')
          except Exception as e:
              print(f'Error checking health issues: {e}')
          "
        continue-on-error: true

      - name: Generate health badges
        run: |
          python tools/health-checker/badge_generator.py \
            --health-report=health-report.json \
            --output-dir=.github/badges \
            --repo-owner=${{ github.repository_owner }} \
            --repo-name=${{ github.event.repository.name }}
        continue-on-error: true

      - name: Ensure badges directory exists
        run: |
          mkdir -p .github/badges
          # Create a basic badge if badge generation failed
          if [ ! -f ".github/badges/health-score.svg" ]; then
            echo '<svg xmlns="http://www.w3.org/2000/svg" width="104" height="20"><g fill="#fff" text-anchor="middle" font-family="DejaVu Sans,Verdana,Geneva,sans-serif" font-size="11"><rect width="104" height="20" fill="#555"/><rect x="37" width="67" height="20" fill="#red"/><text x="19.5" y="15" fill="#fff">health</text><text x="69.5" y="15" fill="#fff">unknown</text></g></svg>' > .github/badges/health-score.svg
          fi

      - name: Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: health-report-${{ github.run_number }}
          path: |
            health-report.json
            health-dashboard.html
            .github/badges/
        continue-on-error: true

      - name: Create health issue (if critical problems found)
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            let healthReport;
            try {
              healthReport = JSON.parse(fs.readFileSync('health-report.json', 'utf8'));
            } catch (error) {
              console.log('Could not read health report, creating workflow failure issue');
              
              const issueBody = `
              ## ðŸš¨ Health Monitoring System Failure

              The automated health check system failed to run properly.

              ### Issue Details:
              - **Error**: Could not read or generate health report
              - **Workflow Run**: ${{ github.run_number }}
              - **Timestamp**: ${new Date().toISOString()}

              ### Next Steps:
              1. Check the workflow logs for detailed error information
              2. Verify health checker dependencies are properly installed
              3. Ensure health checker scripts are present and executable
              4. Re-run the health check workflow after fixes

              This issue was automatically created by the project health monitoring system.
              `;

              try {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `ðŸš¨ Health Monitoring System Failure - ${new Date().toISOString().split('T')[0]}`,
                  body: issueBody,
                  labels: ['health-check', 'critical', 'automated', 'system-failure']
                });
              } catch (issueError) {
                console.log('Failed to create issue:', issueError.message);
              }
              return;
            }

            const criticalIssues = healthReport.issues?.filter(
              issue => issue.severity === 'critical'
            ) || [];

            // Only create issue if there are critical issues or very low health score
            const shouldCreateIssue = criticalIssues.length > 0 || (healthReport.overall_score || 0) < 30;

            if (!shouldCreateIssue) {
              console.log('No critical issues found, skipping issue creation');
              return;
            }

            const issueBody = `
            ## ðŸš¨ Critical Project Health Issues Detected

            The automated health check has detected ${criticalIssues.length} critical issue(s) that require immediate attention.

            ### Health Score
            Overall project health score: **${healthReport.overall_score || 0}/100**

            ### Critical Issues:
            ${criticalIssues.length > 0 ? criticalIssues.map(issue => `
            - **${issue.category || 'General'}**: ${issue.description}
              - **Affected Components**: ${issue.affected_components?.join(', ') || 'Unknown'}
              - **Remediation**: ${issue.remediation_steps?.join('; ') || 'See health report for details'}
            `).join('\n') : '- Low overall health score detected'}

            ### Next Steps:
            1. Review the detailed health report in the workflow artifacts
            2. Address critical issues according to the remediation steps
            3. Re-run the health check to verify fixes

            ### Workflow Details:
            - **Run Number**: ${{ github.run_number }}
            - **Commit**: ${{ github.sha }}
            - **Branch**: ${{ github.ref_name }}

            This issue was automatically created by the project health monitoring system.
            `;

            try {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `ðŸš¨ Critical Project Health Issues - ${new Date().toISOString().split('T')[0]}`,
                body: issueBody,
                labels: ['health-check', 'critical', 'automated']
              });
              console.log('Health issue created successfully');
            } catch (issueError) {
              console.log('Failed to create health issue:', issueError.message);
            }

  trend-analysis:
    runs-on: ubuntu-latest
    needs: health-monitoring
    if: always()

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install matplotlib pandas numpy

      - name: Download health report
        uses: actions/download-artifact@v4
        with:
          name: health-report-${{ github.run_number }}
        continue-on-error: true

      - name: Check if health report exists
        id: check-report
        run: |
          if [ -f "health-report.json" ]; then
            echo "report-exists=true" >> $GITHUB_OUTPUT
          else
            echo "report-exists=false" >> $GITHUB_OUTPUT
            echo "Health report not found, creating minimal report for trend analysis"
            # Create a minimal report for trend analysis
            cat > health-report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "overall_score": 50.0,
            "categories": {
              "tests": {"score": 50.0, "status": "warning"},
              "documentation": {"score": 50.0, "status": "warning"},
              "configuration": {"score": 50.0, "status": "warning"},
              "code_quality": {"score": 50.0, "status": "warning"}
            },
            "issues": [
              {
                "severity": "warning",
                "description": "Health monitoring job failed - using fallback data for trend analysis"
              }
            ],
            "recommendations": [
              "Fix health monitoring job to get accurate health data"
            ]
          }
          EOF
          fi

      - name: Generate health trends
        if: steps.check-report.outputs.report-exists == 'true' || steps.check-report.outputs.report-exists == 'false'
        run: |
          python tools/health-checker/analyze_trends.py \
            --current-report=health-report.json \
            --output=health-trends.json \
            --chart-output=health-trends.png

      - name: Upload trend analysis
        uses: actions/upload-artifact@v4
        with:
          name: health-trends-${{ github.run_number }}
          path: |
            health-trends.json
            health-trends.png
