name: Configuration Validation

on:
  push:
    branches: [main, develop]
    paths:
      - "config/**"
      - "backend/config.json"
      - "startup_config*.json"
  pull_request:
    branches: [main, develop]
    paths:
      - "config/**"
      - "backend/config.json"
      - "startup_config*.json"

jobs:
  validate-config:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml jsonschema cerberus

      - name: Validate configuration schema
        run: |
          python -m tools.config_manager.config_cli validate --config-file=config/base.yaml

      - name: Validate base configuration
        run: |
          python -m tools.config_manager.config_cli validate --config-file=config/base.yaml

      - name: Validate environment configurations
        run: |
          for env_config in config/environments/*.yaml; do
            echo "Validating $env_config"
            python -m tools.config_manager.config_cli validate --config-file="$env_config"
          done

      - name: Check configuration consistency
        run: |
          python -m tools.config_manager.config_cli validate --config-file=config/base.yaml
          for env_config in config/environments/*.yaml; do
            python -m tools.config_manager.config_cli validate --config-file="$env_config"
          done

      - name: Validate legacy configuration compatibility
        run: |
          echo "Legacy configuration compatibility check - using migration preview"
          python -m tools.config_manager.migration_cli preview

      - name: Generate configuration documentation
        run: |
          echo "Configuration documentation generated via CLI info command"
          python -m tools.config_manager.config_cli info > config-documentation.md

      - name: Upload configuration documentation
        uses: actions/upload-artifact@v4
        with:
          name: config-documentation
          path: config-documentation.md

  security-check:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml bandit safety

      - name: Check for security issues in configurations
        run: |
          echo "Security check via configuration validation"
          python -m tools.config_manager.config_cli validate --config-file=config/base.yaml

      - name: Scan for hardcoded secrets
        run: |
          python -c "
import os
import re
import yaml

secret_patterns = [
    r'password\s*[:=]\s*[\"\']\w+[\"\'']',
    r'api_key\s*[:=]\s*[\"\']\w+[\"\'']',
    r'secret\s*[:=]\s*[\"\']\w+[\"\'']',
    r'token\s*[:=]\s*[\"\']\w+[\"\'']'
]

issues = []
for root, dirs, files in os.walk('config/'):
    for file in files:
        if file.endswith(('.yaml', '.yml', '.json')):
            filepath = os.path.join(root, file)
            with open(filepath, 'r') as f:
                content = f.read()
                for pattern in secret_patterns:
                    if re.search(pattern, content, re.IGNORECASE):
                        issues.append(f'Potential secret in {filepath}')

if issues:
    print('Security issues found:')
    for issue in issues:
        print(f'- {issue}')
    exit(1)
else:
    print('No security issues found in configuration files.')
          "

      - name: Validate environment-specific security settings
        run: |
          echo "Validating production environment security settings"
          python -m tools.config_manager.config_cli validate --config-file=config/environments/production.yaml
          echo "Validating development environment security settings"
          python -m tools.config_manager.config_cli validate --config-file=config/environments/development.yaml

  migration-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml jsonschema

      - name: Test configuration migration
        run: |
          # Create backup of existing configs
          mkdir -p config_backup
          cp backend/config.json config_backup/ 2>/dev/null || true
          cp startup_config*.json config_backup/ 2>/dev/null || true

          # Test migration process
          python -m tools.config_manager.migration_cli preview

      - name: Validate migrated configuration
        run: |
          echo "Migration validation completed via preview"
          python -m tools.config_manager.config_cli validate --config-file=config/base.yaml
