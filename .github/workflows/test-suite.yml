name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock

      - name: Run unit tests
        run: |
          python -m pytest tests/unit/ -v --cov=backend --cov=scripts --cov-report=xml --cov-report=html

      - name: Run integration tests
        run: |
          python -m pytest tests/integration/ -v --maxfail=5

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  performance-tests:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-benchmark

      - name: Run performance tests
        run: |
          python -m pytest tests/performance/ -v --benchmark-only --benchmark-json=benchmark.json

      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: "pytest"
          output-file-path: benchmark.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  health-check:
    runs-on: ubuntu-latest
    needs: [test, performance-tests]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pyyaml jsonschema

      - name: Run project health check
        run: |
          python tools/health-checker/run_health_check.py --output-format=json --output-file=health-report.json

      - name: Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: health-report
          path: health-report.json

      - name: Check health score threshold
        run: |
          python -c "
          import json
          with open('health-report.json') as f:
              report = json.load(f)
          score = report.get('overall_score', 0)
          threshold = 75
          print(f'Health score: {score}/100')
          if score < threshold:
              print(f'Health score {score} is below threshold {threshold}')
              exit(1)
          print('Health check passed!')
          "
